(self.webpackChunksys_docs=self.webpackChunksys_docs||[]).push([[931],{57463:function(e,s,n){"use strict";var t=n(93552),a=n(22122),o=n(19756),r=n(67294),c=n(340),d=n(38456),i=n.n(d),l=n(36938),u=n(89739),f={code:function(e){e.node;var s=e.inline,n=e.className,t=e.children,c=(0,o.Z)(e,["node","inline","className","children"]),d=/language-(\w+)/.exec(n||"");return!s&&d?r.createElement(l.Z,(0,a.Z)({style:u.Z,language:d[1],PreTag:"div",children:String(t).replace(/\n$/,"")},c)):r.createElement("code",(0,a.Z)({className:n},c))}},b=function(e){function s(s){var n;return(n=e.call(this,s)||this).state={examples:n.props.examples,selectedIndex:0},n}return(0,t.Z)(s,e),s.prototype.render=function(){var e=this;return this.state.examples&&this.state.examples.length>0?this.state.examples.length>1?r.createElement(c.mQ,{selectedIndex:this.state.selectedIndex,onSelect:function(s){return e.setState({selectedIndex:s})}},r.createElement(c.td,null,this.state.examples.map((function(e,s){return r.createElement(c.OK,{key:s,label:s},"Example ",s+1)}))),this.state.examples.map((function(e,s){return r.createElement(c.x4,{key:s},r.createElement(i(),{components:f,children:e}))}))):this.state.examples.map((function(e,s){return r.createElement(i(),{key:s,components:f,children:e})})):null},s}(r.Component);s.Z=b},89262:function(e,s,n){"use strict";n.d(s,{Z:function(){return l}});var t=n(63349),a=n(93552),o=n(67294),r=(n(19580),n(15786),n(35421),n(38456)),c=n.n(r),d=(n(87521),function(e){function s(s){var n;return(n=e.call(this,s)||this).state={nodes:n.props.root,tableType:n.props.type,expandedKeys:{}},n.renderParam=n.renderParam.bind((0,t.Z)(n)),n.renderParams=n.renderParams.bind((0,t.Z)(n)),n.getParamElement=n.getParamElement.bind((0,t.Z)(n)),n}(0,a.Z)(s,e);var n=s.prototype;return n.getParamElement=function(e){var s="**`"+e.data.name+"`**",n="";return" yes"===e.data.required&&(n="Required"),"param"!==this.state.tableType&&"type"!==this.state.tableType&&"return"!==this.state.tableType||!e.data.name?null:o.createElement("li",{class:"li-param"},o.createElement("div",{class:"flex short"},o.createElement(c(),{class:"md-type",children:s}),o.createElement("p",{class:"required"},n)))},n.renderParam=function(e){var s=""+e.data.type;return e.children?o.createElement("div",{class:"md-type"},this.getParamElement(e),o.createElement("ul",{class:"ul-param"},o.createElement("li",{class:"li-param"},o.createElement("details",{class:"short-spacing"},o.createElement("summary",null,o.createElement("div",null,o.createElement(c(),{class:"md-type",children:s}),o.createElement(c(),{class:"md-type",children:e.data.description}))),this.renderParams(e.children))))):o.createElement("div",{class:"md-type"},this.getParamElement(e),o.createElement("ul",{class:"ul-param"},o.createElement("li",{class:"li-param"},o.createElement("div",{class:"short-spacing"},o.createElement(c(),{class:"md-type",children:s}),o.createElement(c(),{class:"md-type",children:e.data.description})))))},n.renderParams=function(e){var s=this;return o.createElement("ul",{class:"ul-param md-type"},e.map((function(e){return s.renderParam(e)})))},n.render=function(){return null!=this.state.nodes?o.createElement("div",null,this.renderParams(this.state.nodes)):null},s}(o.Component)),i=n(57463),l=function(e){function s(s){var n;return(n=e.call(this,s)||this).state={showInfo:!1,paramTable:n.props.paramTable,returnTable:n.props.returnTable,typeTable:n.props.typeTable,examples:n.props.examples,anchor:n.props.anchor,showTitles:n.props.showTitles,buttonShowText:"\u1405"},n.checkLocationHash=n.checkLocationHash.bind((0,t.Z)(n)),n.renderParams=n.renderParams.bind((0,t.Z)(n)),n.renderReturns=n.renderReturns.bind((0,t.Z)(n)),n.renderExamples=n.renderExamples.bind((0,t.Z)(n)),n.renderTypes=n.renderTypes.bind((0,t.Z)(n)),n.renderTable=n.renderTable.bind((0,t.Z)(n)),n.toggleButton=n.toggleButton.bind((0,t.Z)(n)),n}(0,a.Z)(s,e);var n=s.prototype;return n.componentDidMount=function(){void 0!==this.state.anchor&&this.checkLocationHash()},n.checkLocationHash=function(){"undefined"!=typeof location&&this.state.hash!==location.hash&&(location.hash==this.props.anchor?this.setState({showInfo:!0,hash:location.hash,buttonShowText:"\u1401"}):this.setState({hash:location.hash}))},n.componentDidUpdate=function(){void 0!==this.state.anchor&&this.checkLocationHash()},n.renderTable=function(e,s,n){return!1!==this.state.showTitles?o.createElement("div",null,o.createElement("h4",null,s),o.createElement(d,{root:n,type:e})):o.createElement(d,{root:n,type:e})},n.renderParams=function(){return void 0!==this.state.paramTable?this.renderTable("param","Parameters",this.state.paramTable):null},n.renderReturns=function(){return void 0!==this.state.returnTable?this.renderTable("return","Returns",this.state.returnTable):null},n.renderTypes=function(){return void 0!==this.state.typeTable?this.renderTable("type","Types",this.state.typeTable):null},n.renderExamples=function(){return void 0!==this.state.examples?!1!==this.state.showTitles?o.createElement("div",null,o.createElement("h4",null,"Examples"),o.createElement(i.Z,{examples:this.state.examples})):o.createElement(i.Z,{examples:this.state.examples}):null},n.toggleButton=function(){this.setState({showInfo:!this.state.showInfo}),this.state.showInfo?this.state.buttonShowText="\u1405":this.state.buttonShowText="\u1401"},n.render=function(){var e=this;return this.state.showInfo?o.createElement("div",null,o.createElement("button",{class:"toggle-button",onClick:function(){return e.toggleButton()}},this.state.buttonShowText),this.renderParams(),this.renderReturns(),this.renderExamples(),this.renderTypes()):o.createElement("div",null,o.createElement("button",{class:"toggle-button",onClick:function(){return e.toggleButton()}},this.state.buttonShowText))},s}(o.Component)},48551:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function assetBurnToEth () {\n  const feeRate = new sjs.utils.BN(10)\n  const txOpts = { rbf: true }\n  const assetOpts = { ethaddress: Buffer.from('07C72973d42D28de80D47Eb1F8Bc4a8ee0D5bBb1', 'hex') }\n  // in reality this would be a known asset (SYSX)\n  const assetGuid = '1965866356'\n  // burn 1 satoshi (not COINS)\n  // if assets need change sent, set this address. null to let HDSigner find a new address for you\n  const assetChangeAddress = 'tsys1q7zewkwya3je369vyzq5l5e83mrvdqwzgvv9nzg'\n  const assetMap = new Map([\n    [assetGuid, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(1), address: 'tsys1quexf5zalfak2cvv9mujkh9pc3f3wrcgz7gzhh5' }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = 'tsys1q7zewkwya3je369vyzq5l5e83mrvdqwzgvv9nzg'\n  const sysFromXpubOrAddress = 'vpub5ZdpZuCU7ubDRZ5V7uryBDBEZxDNP67FLgPyHgPtiVgjwDk8rjxAFbg4cHNAyp9ZLXNgJRq6f9QjWCc4Ef7gUxFivP7GkSKo6ANNb2jrzhA'\n  const psbt = await syscoinjs.assetAllocationBurn(assetOpts, txOpts, assetMap, sysChangeAddress, feeRate, sysFromXpubOrAddress)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n}\n"},10988:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function assetBurnToSys () {\n  const feeRate = new sjs.utils.BN(10)\n  const txOpts = { rbf: true }\n  // empty ethaddress means burning SYSX to SYS, otherwise its burning asset to goto Etheruem\n  const assetOpts = { ethaddress: Buffer.from('') }\n  // in reality this would be a known asset (SYSX)\n  const assetGuid = '3372068234'\n  // burn 1 satoshi (not COINS)\n  // if assets need change sent, set this address. null to let HDSigner find a new address for you\n  const assetChangeAddress = null\n  const assetMap = new Map([\n    [assetGuid, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(1), address: 'tsys1qdflre2yd37qtpqe2ykuhwandlhq04r2td2t9ae' }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const psbt = await syscoinjs.assetAllocationBurn(assetOpts, txOpts, assetMap, sysChangeAddress, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n}\n"},80585:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function assetMintToSys () {\n  const feeRate = new sjs.utils.BN(10)\n  const txOpts = { rbf: true }\n  const assetOpts = {\n    bridgetransferid: 2,\n    blocknumber: 6816449,\n    txvalue: Buffer.from('f9012b82051f843b9aca008307a120940765efb302d504751c652c5b1d65e8e9edf2e70f80b8c454c988ff00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000009be8894b0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002c62637274317130667265323430737939326d716b386b6b377073616561366b74366d3537323570377964636a00000000000000000000000000000000000000002ca0dccb6e077c3f6252d199202113893407119d4ba09667113f2d20c63a31487b87a01e0a059e50f08f2772781691f2c9e43a9503a167c98cf467b1afc177b74d84e6', 'hex'),\n    txroot: Buffer.from('a0842ab40a9c4770c8ec74158aadcf943e8158128fdd1ba8cef9c7cb8eda732692', 'hex'),\n    txparentnodes: Buffer.from('f9039cf871a04442f3f69add48df0531fe3c0025103b53fcf3fe38060e5f29366caec8855e4fa0229f7b7e69c0b5793f8a61c06f5cc09b0f4938561856c632ee56c3b2c4d6d153808080808080a07720fff5e8eabef55fa129ee55b3b0d82875e2b25b8f26e22cf6b5c4f9cec7ab8080808080808080f901f180a03ee147749c5b769bc5d1a53e4f37567506d417de4ec4e67722130eda4638427da043caa62b40dad61bce4d50fb62ea485729a6687c3aa13895cf4ba234b92afe82a0b79958e4aa63104da4599ebb91e712375e6adfc89abc14b9533c5778f107e7d8a01bc7f80f81a8d281253ac882bb89aca6131e5794bfcbdccde990bb6d5be6cb2fa0aedad62f1426b68e395a59e06bf242fb28b882af67589bce3495a99650058ec4a0c21a7e0b9d0948bb6b65a5e73f5f01173064d20e4819ca4884d1eabc22bf737da090087708c533b10af8925eebf398c005fc16cb6a515111f2be4f328f762949d0a02827daacd6a52ae6c74a78791ff0c5e33a7a85f5ca0a47cdfbcd5219f75f705ca0af7ecf31d56575155d272cd813bf7d7ac435f62b0538c31771e407dafef6be53a09b74707c3abdbfa305cb61f23c940f063f553f17d0bd3013126aad357193353ea067a52ed59820bb48f8010d2b2bb0ee92803b1a00a8341fd4c3269b065ed070d9a0bf0e9b45955283e6e04b71eda63bfc7b55d9f54527943aa1c159b4161b1e1daea0ecabd4c00deacf9a7ff25be942c9f468628eb776fbec23a9ca0d8fc256f14a31a0df406c7ac7f38c2ea1d9bdb06c2e51db3de8cf0e655a8e0e683e19ca1ddf83d3a08360ec6c5e26614f144520ed9d0b577640381f0f38b5429b67422f75d603ad5a80f9013220b9012ef9012b82051f843b9aca008307a120940765efb302d504751c652c5b1d65e8e9edf2e70f80b8c454c988ff00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000009be8894b0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002c62637274317130667265323430737939326d716b386b6b377073616561366b74366d3537323570377964636a00000000000000000000000000000000000000002ca0dccb6e077c3f6252d199202113893407119d4ba09667113f2d20c63a31487b87a01e0a059e50f08f2772781691f2c9e43a9503a167c98cf467b1afc177b74d84e6', 'hex'),\n    txpath: Buffer.from('0b', 'hex'),\n    receiptvalue: Buffer.from('f902e00183192ee2bf901d5f89b94f2bb7bfa19e7c4b6bb333ee1afdf8e5e8f9b3561f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000b0ea8c9ee8aa87efd28a12de8c034f947c144053a00000000000000000000000000765efb302d504751c652c5b1d65e8e9edf2e70fa000000000000000000000000000000000000000000000000000000002540be400f89b94f2bb7bfa19e7c4b6bb333ee1afdf8e5e8f9b3561f863a08c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a0000000000000000000000000b0ea8c9ee8aa87efd28a12de8c034f947c144053a00000000000000000000000000765efb302d504751c652c5b1d65e8e9edf2e70fa00000000000000000000000000000000000000000000000000000000000000000f899940765efb302d504751c652c5b1d65e8e9edf2e70fe1a09c6dea23fe3b510bb5d170df49dc74e387692eaa3258c691918cd3aa94f5fb74b860000000000000000000000000b0ea8c9ee8aa87efd28a12de8c034f947c14405300000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000080800000002', 'hex'),\n    receiptroot: Buffer.from('a0a958499bf48fcce17672b58aa9037bd3dafeb6231880722d909c60bacfaaa8d4', 'hex'),\n    receiptparentnodes: Buffer.from('f90551f871a0cab13def05783d763febde31920bd234d0486c26955c2937e0486db909a28eeea09cf564a668a29a5f1cc5d6ef8e19988dfd2b30d290672f0ffc4200e608cb65ac808080808080a029b8ed2258c53562954c87bcd7f60671029680d2a19ef8bcd3ad470ea48d57d18080808080808080f901f180a07c21ca39872e6b8f611bc6b1b295c24f988b5cf944625eabf5236b37ea3b9f01a0edb9e63fdc31ba41f11a8b2fb8000ad1357b3c0b27a8483968d75e93e7b488a1a02231847aa3c5dde2f2a1851a66aabec65e5eaae8c28110756f122c72be1fba05a08fa87809e5b7f989e78ccbe1a6bc4924115d5747529af879f2fe196f959b64fca091f1bf748061eba21a413b72d70afccb8daebb5906d5cd9dda06d5f877065d5ba0d7e6c82dd1c25eb2f90b02f038beaff98c260d46992d0b3c1eac7d51552c7417a01d5c43deb2e3794292cdffb04f82ab25bc4e75f5e0cab928b66582e08026f5b1a0d7323a87dc8fbc66c7b34810d2cad92fc0da168d962b4556e825a3266a148b74a0af31f0b7cdcd6a855ac7678ef2b8fcb1afeda918b0c8e4696a4013f2b75ca402a0f9d63f2db8ab6d3c3e12073ac2910ee575832bde3e4586f18e59dd26a16adb7ca0f0c91e059c43780617d304fe8992511f096ccc35232da1f25127db53ba4fb05aa052030932d0a9026efd2a3ada67f33d401cd9a97ddb24c606af3a0a0c24e432aba0142af9b4686c6ca30b0ac39133fa76d8682b7bbbec488e62e652d3f25419777da0940f31617e91cfbabaa9d0d1638949f8125f80a43027122778522675194a4e65a0edc4c7d2cf30150fdf7e502d0ef06c80c85fc37260134a112493c6183f62f4b580f902e720b902e3f902e00183192ee2bf901d5f89b94f2bb7bfa19e7c4b6bb333ee1afdf8e5e8f9b3561f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000b0ea8c9ee8aa87efd28a12de8c034f947c144053a00000000000000000000000000765efb302d504751c652c5b1d65e8e9edf2e70fa000000000000000000000000000000000000000000000000000000002540be400f89b94f2bb7bfa19e7c4b6bb333ee1afdf8e5e8f9b3561f863a08c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a0000000000000000000000000b0ea8c9ee8aa87efd28a12de8c034f947c144053a00000000000000000000000000765efb302d504751c652c5b1d65e8e9edf2e70fa00000000000000000000000000000000000000000000000000000000000000000f899940765efb302d504751c652c5b1d65e8e9edf2e70fe1a09c6dea23fe3b510bb5d170df49dc74e387692eaa3258c691918cd3aa94f5fb74b860000000000000000000000000b0ea8c9ee8aa87efd28a12de8c034f947c14405300000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000080800000002', 'hex')\n  }\n  // asset and address being minted to from Eth to Sys\n  const mintAddress = 'tsys1qdflre2yd37qtpqe2ykuhwandlhq04r2td2t9ae'\n  const assetGuid = '2615707979'\n  // mint 100 COINS\n  const amountToMint = new sjs.utils.BN(10000000000)\n  // if assets need change sent, set this address. null to let HDSigner find a new address for you\n  const assetChangeAddress = null\n  const assetMap = new Map([\n    [assetGuid, { changeAddress: assetChangeAddress, outputs: [{ value: amountToMint, address: mintAddress }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const psbt = await syscoinjs.assetAllocationMint(assetOpts, txOpts, assetMap, sysChangeAddress, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n}"},96163:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\n// pass just Eth txid and let Syscoin get proof to create transaction\nasync function assetMintToSys () {\n  const feeRate = new sjs.utils.BN(10)\n  const txOpts = { rbf: true }\n  // infura URL + ID and ethereum burn txid\n  const assetOpts = {\n    infuraurl: '<YOUR INFURA URL>',\n    ethtxid: '0x3c3bfe141fcbe313f2afd31be1b63dd3a0147235161e637407fbb8605d3d294f'\n  }\n  // will be auto filled based on ethtxid eth-proof\n  const assetMap = null\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const psbt = await syscoinjs.assetAllocationMint(assetOpts, txOpts, assetMap, sysChangeAddress, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n}"},39900:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function issueAsset () {\n  const feeRate = new sjs.utils.BN(10)\n  const txOpts = { rbf: true }\n  const assetGuid = '3813460941'\n  // mint 11000 satoshi (not COINS)\n  // if assets need change sent, set this address. null to let HDSigner find a new address for you\n  const assetChangeAddress = null\n  const assetMap = new Map([\n    [assetGuid, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(6000), address: 'tsys1qpay7ehn7epk5dmh8xv7dn5ksvyhr06323mtz0s' }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const psbt = await syscoinjs.assetSend(txOpts, assetMap, sysChangeAddress, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n}"},89872:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function issueAssetNFT () {\n  const feeRate = new sjs.utils.BN(10)\n  const txOpts = { rbf: true }\n  const assetGuid = '2264781424'\n  const NFTID = sjs.utils.createAssetID('1', assetGuid)\n  // mint 1000 satoshi (not COINS)\n  // if assets need change sent, set this address. null to let HDSigner find a new address for you\n  const assetChangeAddress = null\n  const assetMap = new Map([\n    [assetGuid, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(1000), address: 'tsys1qdflre2yd37qtpqe2ykuhwandlhq04r2td2t9ae' }] }],\n    [NFTID, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(1), address: 'tsys1qdflre2yd37qtpqe2ykuhwandlhq04r2td2t9ae' }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const psbt = await syscoinjs.assetSend(txOpts, assetMap, sysChangeAddress, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n}"},61610:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function issueAssetNFT () {\n  const feeRate = new sjs.utils.BN(10)\n  const txOpts = { rbf: true }\n  const assetGuid = '2441957158'\n  const NFTID = sjs.utils.createAssetID('1', assetGuid)\n  // mint 1000 satoshi (not COINS)\n  // if assets need change sent, set this address. null to let HDSigner find a new address for you\n  const assetChangeAddress = null\n  const assetMap = new Map([\n    [NFTID, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(1), address: 'tsys1qdflre2yd37qtpqe2ykuhwandlhq04r2td2t9ae' }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const psbt = await syscoinjs.assetSend(txOpts, assetMap, sysChangeAddress, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n}"},90449:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\nconst syscointx = require('syscointx-js')\n\nasync function newAsset () {\n  const feeRate = new sjs.utils.BN(10)\n  const txOpts = { rbf: false }\n  const assetOpts = { precision: 8, symbol: 'JAG', maxsupply: new sjs.utils.BN(100000000000), description: 'publicvalue' }\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  // let HDSigner find asset destination address\n  const sysReceivingAddress = null\n  const psbt = await syscoinjs.assetNew(assetOpts, txOpts, sysChangeAddress, sysReceivingAddress, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n    return\n  }\n  const assets = syscointx.getAssetsFromTx(psbt.extractTransaction())\n  console.log('created asset ' + assets.keys().next().value)\n}"},98510:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function sendSys () {\n  const feeRate = new sjs.utils.BN(10)\n  const txOpts = { rbf: false }\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const outputsArr = [\n    { address: 'tsys1quas925cuqmlkc0082442uh68efv3hdazknmjpd', value: new sjs.utils.BN(10000000) }\n  ]\n  const psbt = await syscoinjs.createTransaction(txOpts, sysChangeAddress, outputsArr, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n}"},75408:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function sendSysMemo () {\n  const feeRate = new sjs.utils.BN(10)\n  const memo = Buffer.from('Gas station order id: 606c80d6cc793f13d2f0d424. Asset GUID 341906151')\n  const memoHeader = Buffer.from([0xfe, 0xfe, 0xaf, 0xaf, 0xaf, 0xaf])\n  const txOpts = { rbf: true, memo: memo, memoHeader: memoHeader, assetWhiteList: new Map([['341906151', {}]]) }\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = 'tsys1qnykk8e2e6wuufaz0lcdlry05fq5sj3uzczra3p'\n  const outputsArr = [\n    { address: 'tsys1q0hxdj9r3tyxmr66tehdhhl35l5rk4ucanteuh6', value: new sjs.utils.BN(3158692) }\n  ]\n  const result = await syscoinjs.createTransaction(txOpts, sysChangeAddress, outputsArr, feeRate, 'tsys1qnykk8e2e6wuufaz0lcdlry05fq5sj3uzczra3p')\n  if (!result) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n  const psbt = await syscoinjs.signAndSendWithWIF(result.psbt, 'cQh85hzaUMQDCneQvuwEvKFS418gzHfaQ9MmKj9pCd8aKgRNaEDr', result.assets)\n  const memoExtracted = sjs.utils.getMemoFromOpReturn(psbt.txOutputs, memoHeader)\n  console.log('memo extracted from transaction ' + memoExtracted.toString())\n}"},81099:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function sysBurnToAsset () {\n  const feeRate = new sjs.utils.BN(10)\n  const txOpts = { rbf: true }\n  // asset and address being minted to from Eth to Sys\n  const mintAddress = 'tsys1qdflre2yd37qtpqe2ykuhwandlhq04r2td2t9ae'\n  const assetGuid = '3372068234'\n  // mint 10 COINS\n  const amountToMint = new sjs.utils.BN(1000000000)\n  // if assets need change sent, set this address. null to let HDSigner find a new address for you\n  const assetChangeAddress = null\n  const assetMap = new Map([\n    [assetGuid, { changeAddress: assetChangeAddress, outputs: [{ value: amountToMint, address: mintAddress }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const psbt = await syscoinjs.syscoinBurnToAssetAllocation(txOpts, assetMap, sysChangeAddress, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n}"},35964:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function transferAsset () {\n  const feeRate = new sjs.utils.BN(10)\n  // set to false for ZDAG, true disables it but it is replaceable by bumping the fee\n  const txOpts = { rbf: false }\n  const assetguid = '3813460941'\n  // if assets need change sent, set this address. null to let HDSigner find a new address for you\n  const assetChangeAddress = null\n  const assetMap = new Map([\n    [assetguid, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(500), address: 'tsys1qgkyez6kz2l2qkr5zmjmwx0rwkrkylf2p09lyd4' }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const psbt = await syscoinjs.assetAllocationSend(txOpts, assetMap, sysChangeAddress, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n}"},40770:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function transferAssetFundedByAddress () {\n  const feeRate = new sjs.utils.BN(10)\n  // set to false for ZDAG, true disables it but it is replaceable by bumping the fee\n  const txOpts = { rbf: true }\n  const assetguid = '2201781193'\n  // if assets need change sent, set this address. null to let HDSigner find a new address for you\n  const assetChangeAddress = null\n  const assetMap = new Map([\n    [assetguid, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(1000000), address: 'tsys1qk0mrytgd06tc4rdtcs7h6nvx9ph67rjavv7qx6' }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const result = await syscoinjs.assetAllocationSend(txOpts, assetMap, sysChangeAddress, feeRate, 'tsys1qd2wejyl606fratchj0emvwcl78p67wq4x9cy4w')\n  if (!result) {\n    console.log('Could not create transaction, not enough funds?')\n    return\n  }\n  await syscoinjs.signAndSendWithWIF(result.res, 'cSRej8siHpwEKN9Mzh8s7WFwFenhb2my5dnyWK8pH1jUwonCvEdP', result.assets)\n}"},5235:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function transferAssetFundedByMultiHDSigners () {\n  const mnemonic1 = 'bicycle lucky earn primary wasp ranch dinner gravity property tenant gospel nephew soul cruise tool'\n  const Signer1 = new sjs.utils.HDSigner(mnemonic1, null, true)\n  const feeRate = new sjs.utils.BN(10)\n  // set to false for ZDAG, true disables it but it is replaceable by bumping the fee\n  const txOpts = { rbf: true }\n  const assetguid = '3813460941'\n  // if assets need change sent, set this address. null to let HDSigner find a new address for you\n  const assetChangeAddress = null\n  const assetMap = new Map([\n    [assetguid, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(6000), address: 'tsys1qfqq6fg6jacruta85xysa4hzc00y9c0numedhh8' }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const sysFromXpubOrAddress = [HDSigner.getAccountXpub(), Signer1.getAccountXpub()]\n  const result = await syscoinjs.assetAllocationSend(txOpts, assetMap, sysChangeAddress, feeRate, sysFromXpubOrAddress)\n  if (!result) {\n    console.log('Could not create transaction, not enough funds?')\n    return\n  }\n  // this should sign one of the inputs with HDSigner\n  let psbt = await syscoinjs.signAndSend(result.psbt, result.assets)\n  // this should sign the other input with Signer1, and then notarize, signing one input with Signer1 again\n  const psbt1 = await syscoinjs.signAndSend(psbt, result.assets, Signer1)\n  // this should finalize the transaction from HDSigner signing (this time notarized) and send it to network\n  psbt = await syscoinjs.signAndSend(psbt1, result.assets)\n}"},61127:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function transferAssetFundedByXpub () {\n  const feeRate = new sjs.utils.BN(10)\n  // set to false for ZDAG, true disables it but it is replaceable by bumping the fee\n  const txOpts = { rbf: true }\n  const assetguid = '341906151'\n  // if assets need change sent, set this address. null to let HDSigner find a new address for you\n  const assetChangeAddress = null\n  const assetMap = new Map([\n    [assetguid, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(100000), address: 'tsys1qk0mrytgd06tc4rdtcs7h6nvx9ph67rjavv7qx6' }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const result = await syscoinjs.assetAllocationSend(txOpts, assetMap, sysChangeAddress, feeRate, 'vpub5ZnEznWQvUgz3caxxZVnfnxkHkDstTFrsdSi9zQAf48ozc4a1XdfaAY6eBgKigm4NxykfcFh7d3oBwMHqKzzGo2jKET8AbypuuffvbBwAwH')\n  if (!result) {\n    console.log('Could not create transaction, not enough funds?')\n    return\n  }\n  await syscoinjs.signAndSend(result.res, result.assets)\n}"},5852:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function transferAssetWithMemo () {\n  const feeRate = new sjs.utils.BN(10)\n  // data carrying memo field added to opreturn commitment\n  const memo = Buffer.from('a7bf215279d3f6568dcd17c429d41a35a466f803', 'hex')\n  const memoHeader = Buffer.from([0xfe, 0xfe, 0xaf, 0xaf, 0xaf, 0xaf])\n  // set to false for ZDAG, true disables it but it is replaceable by bumping the fee\n  const txOpts = { rbf: true, memo: memo, memoHeader: memoHeader }\n  const assetguid = '341906151'\n  // if assets need change sent, set this address. null to let HDSigner find a new address for you\n  const assetChangeAddress = null\n  const assetMap = new Map([\n    [assetguid, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(5), address: 'tsys1qk0mrytgd06tc4rdtcs7h6nvx9ph67rjavv7qx6' }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const psbt = await syscoinjs.assetAllocationSend(txOpts, assetMap, sysChangeAddress, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n  const memoExtracted = sjs.utils.getMemoFromOpReturn(psbt.txOutputs, memoHeader)\n  console.log('memo extracted from transaction ' + memoExtracted.toString('hex'))\n}"},54545:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function updateAsset () {\n  const feeRate = new sjs.utils.BN(10)\n  const txOpts = { rbf: true }\n  const assetGuid = '2125509931'\n  // update capability flags, update description and update eth smart contract address\n  const assetOpts = { updatecapabilityflags: '123', contract: Buffer.from('2b1e58b979e4b2d72d8bca5bb4646ccc032ddbfc', 'hex'), description: 'new publicvalue' }\n  // send asset back to ourselves as well as any change\n  const assetChangeAddress = null\n  // send change back to ourselves as well as recipient to ourselves\n  const assetMap = new Map([\n    [assetGuid, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(0), address: assetChangeAddress }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const psbt = await syscoinjs.assetUpdate(assetGuid, assetOpts, txOpts, assetMap, sysChangeAddress, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n}"},98741:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\n\nasync function updateAssetAuxFees () {\n  const feeRate = new sjs.utils.BN(10)\n  const txOpts = { rbf: true }\n  const assetGuid = '2229676993'\n  const scalarPct = 1000\n  // the aux fee keyPair\n  const keyPair = HDSigner.createKeypair(0)\n  // get the p2wpkh payment so we can get the keyid (payment.hash)\n  const payment = sjs.utils.bitcoinjs.payments.p2wpkh({\n    pubkey: keyPair.publicKey,\n    network: HDSigner.Signer.network\n  })\n  const auxFeeKeyID = Buffer.from(payment.hash.toString('hex'), 'hex')\n  // setup the auxfee table\n  const auxFees = [\n    {\n      bound: new sjs.utils.BN(0),\n      percent: 1 * scalarPct\n    },\n    {\n      bound: new sjs.utils.BN(10 * syscointx.utils.COIN),\n      percent: 0.4 * scalarPct\n    },\n    {\n      bound: new sjs.utils.BN(250 * syscointx.utils.COIN),\n      percent: 0.2 * scalarPct\n    },\n    {\n      bound: new sjs.utils.BN(2500 * syscointx.utils.COIN),\n      percent: 0.07 * scalarPct\n    },\n    {\n      bound: new sjs.utils.BN(25000 * syscointx.utils.COIN),\n      percent: 0.007 * scalarPct\n    },\n    {\n      bound: new sjs.utils.BN(250000 * syscointx.utils.COIN),\n      percent: 0\n    }\n  ]\n  // update auxfee details\n  const assetOpts = { auxfeedetails: { auxfeekeyid: auxFeeKeyID, auxfees: auxFees } }\n  // send asset back to ourselves as well as any change\n  const assetChangeAddress = null\n  // send change back to ourselves as well as recipient to ourselves\n  const assetMap = new Map([\n    [assetGuid, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(0), address: assetChangeAddress }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const psbt = await syscoinjs.assetUpdate(assetGuid, assetOpts, txOpts, assetMap, sysChangeAddress, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n}"},5160:function(e,s,n){"use strict";s.Z="```js\nconst mnemonic = 'air leader stone antenna first shrug panic before nut sport bench keen'\n// blockbook URL\nconst backendURL = 'https://sys-explorer.tk/' // if using localhost you don't need SSL see use 'systemctl edit --full blockbook-syscoin.service' to remove SSL from blockbook\nconst sjs = require('syscoinjs-lib')\n// 'null' for no password encryption for local storage and 'true' for testnet\nconst HDSigner = new sjs.utils.HDSigner(mnemonic, null, true)\nconst syscoinjs = new sjs.Syscoin(HDSigner, backendURL)\nconst syscointx = require('syscointx-js')\n\nasync function updateAssetNotary () {\n  const feeRate = new sjs.utils.BN(10)\n  const txOpts = { rbf: true }\n  const assetGuid = '2039276165'\n  // the notary keyPair\n  const keyPair = HDSigner.createKeypair(0)\n  // get the p2wpkh payment so we can get the keyid (payment.hash)\n  const payment = sjs.utils.bitcoinjs.payments.p2wpkh({\n    pubkey: keyPair.publicKey,\n    network: HDSigner.Signer.network\n  })\n  // the notary key and the details can be updated independently but we will update both here\n  const notaryKeyID = Buffer.from(payment.hash.toString('hex'), 'hex')\n  const notaryDetails =\n  {\n    // endpoint must be encoded in utf8 using Buffer.from (default) because it should encode as bytes represented by base64 string (encodeToBase64)\n    endpoint: Buffer.from(syscointx.utils.encodeToBase64('https://test12.com')),\n    instanttransfers: true,\n    hdrequired: false\n  }\n  // update auxfee details\n  const assetOpts = { notarykeyid: notaryKeyID,  notarydetails: notaryDetails }\n  // send asset back to ourselves as well as any change\n  const assetChangeAddress = null\n  // send change back to ourselves as well as recipient to ourselves\n  const assetMap = new Map([\n    [assetGuid, { changeAddress: assetChangeAddress, outputs: [{ value: new sjs.utils.BN(0), address: assetChangeAddress }] }]\n  ])\n  // if SYS need change sent, set this address. null to let HDSigner find a new address for you\n  const sysChangeAddress = null\n  const psbt = await syscoinjs.assetUpdate(assetGuid, assetOpts, txOpts, assetMap, sysChangeAddress, feeRate)\n  if (!psbt) {\n    console.log('Could not create transaction, not enough funds?')\n  }\n}"},6932:function(e,s,n){"use strict";n.r(s),n.d(s,{frontMatter:function(){return C},metadata:function(){return D},toc:function(){return H},default:function(){return R}});var t=n(22122),a=n(19756),o=(n(67294),n(3905)),r=n(89262),c=(n(57463),n(48551)),d=n(10988),i=n(81099),l=n(90449),u=n(39900),f=n(89872),b=n(61610),h=n(80585),p=n(96163),y=n(98510),m=n(75408),g=n(35964),k=n(40770),S=n(5235),w=n(61127),x=n(5852),j=n(54545),A=n(98741),v=n(5160),C={sidebar_position:7},D={unversionedId:"documentation/javascript-sdk-ref/examples",id:"documentation/javascript-sdk-ref/examples",isDocsHomePage:!1,title:"Examples",description:"Burn Asset to Ethereum",source:"@site/docs/documentation/javascript-sdk-ref/examples.mdx",sourceDirName:"documentation/javascript-sdk-ref",slug:"/documentation/javascript-sdk-ref/examples",permalink:"/docs/documentation/javascript-sdk-ref/examples",version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Blockbook API",permalink:"/docs/documentation/javascript-sdk-ref/blockbook"},next:{title:"FAQ",permalink:"/docs/faq"}},H=[{value:"Burn Asset to Ethereum",id:"burn-asset-to-ethereum",children:[]},{value:"Burn Asset to Syscoin",id:"burn-asset-to-syscoin",children:[]},{value:"Burn SYS to Asset",id:"burn-sys-to-asset",children:[]},{value:"Create Asset",id:"create-asset",children:[]},{value:"Issue Asset",id:"issue-asset",children:[]},{value:"Issue NFT 1",id:"issue-nft-1",children:[]},{value:"Issue NFT 2",id:"issue-nft-2",children:[]},{value:"Mint Asset to Syscoin 1",id:"mint-asset-to-syscoin-1",children:[]},{value:"Mint Asset to Syscoin 2",id:"mint-asset-to-syscoin-2",children:[]},{value:"Send SYS",id:"send-sys",children:[]},{value:"Send SYS with Memo",id:"send-sys-with-memo",children:[]},{value:"Transfer Asset",id:"transfer-asset",children:[]},{value:"Transfer Asset Funded by an Address",id:"transfer-asset-funded-by-an-address",children:[]},{value:"Transfer Asset Funded by Multiple Signers",id:"transfer-asset-funded-by-multiple-signers",children:[]},{value:"Transfer Asset Funded by xPUB",id:"transfer-asset-funded-by-xpub",children:[]},{value:"Transfer Asset with Memo",id:"transfer-asset-with-memo",children:[]},{value:"Update Asset",id:"update-asset",children:[]},{value:"Update Asset AuxFees",id:"update-asset-auxfees",children:[]},{value:"Update Asset Notary Details",id:"update-asset-notary-details",children:[]}],T={toc:H};function R(e){var s=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,t.Z)({},T,n,{components:s,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"burn-asset-to-ethereum"},"Burn Asset to Ethereum"),(0,o.kt)(r.Z,{examples:[c.Z],anchor:"#burn-asset-to-ethereum",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"burn-asset-to-syscoin"},"Burn Asset to Syscoin"),(0,o.kt)(r.Z,{examples:[d.Z],anchor:"#burn-asset-to-syscoin",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"burn-sys-to-asset"},"Burn SYS to Asset"),(0,o.kt)(r.Z,{examples:[i.Z],anchor:"#burn-sys-to-asset",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"create-asset"},"Create Asset"),(0,o.kt)(r.Z,{examples:[l.Z],anchor:"#create-asset",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"issue-asset"},"Issue Asset"),(0,o.kt)(r.Z,{examples:[u.Z],anchor:"#issue-asset",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"issue-nft-1"},"Issue NFT 1"),(0,o.kt)(r.Z,{examples:[f.Z],anchor:"#issue-nft-1",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"issue-nft-2"},"Issue NFT 2"),(0,o.kt)(r.Z,{examples:[b.Z],anchor:"#issue-nft-2",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"mint-asset-to-syscoin-1"},"Mint Asset to Syscoin 1"),(0,o.kt)(r.Z,{examples:[h.Z],anchor:"#mint-asset-to-syscoin-1",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"mint-asset-to-syscoin-2"},"Mint Asset to Syscoin 2"),(0,o.kt)(r.Z,{examples:[p.Z],anchor:"#mint-asset-to-syscoin-2",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"send-sys"},"Send SYS"),(0,o.kt)(r.Z,{examples:[y.Z],anchor:"#send-sys",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"send-sys-with-memo"},"Send SYS with Memo"),(0,o.kt)(r.Z,{examples:[m.Z],anchor:"#send-sys-with-memo",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"transfer-asset"},"Transfer Asset"),(0,o.kt)(r.Z,{examples:[g.Z],anchor:"#transfer-asset",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"transfer-asset-funded-by-an-address"},"Transfer Asset Funded by an Address"),(0,o.kt)(r.Z,{examples:[k.Z],anchor:"#transfer-asset-funded-by-an-address",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"transfer-asset-funded-by-multiple-signers"},"Transfer Asset Funded by Multiple Signers"),(0,o.kt)(r.Z,{examples:[S.Z],anchor:"#transfer-asset-funded-by-multiple-Signers",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"transfer-asset-funded-by-xpub"},"Transfer Asset Funded by xPUB"),(0,o.kt)(r.Z,{examples:[w.Z],anchor:"#transfer-asset-funded-by-xpub",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"transfer-asset-with-memo"},"Transfer Asset with Memo"),(0,o.kt)(r.Z,{examples:[x.Z],anchor:"#transfer-asset-with-memo",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"update-asset"},"Update Asset"),(0,o.kt)(r.Z,{examples:[j.Z],anchor:"#update-asset",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"update-asset-auxfees"},"Update Asset AuxFees"),(0,o.kt)(r.Z,{examples:[A.Z],anchor:"#update-asset-auxfees",showTitles:!1,mdxType:"ShowInfoComponent"}),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"update-asset-notary-details"},"Update Asset Notary Details"),(0,o.kt)(r.Z,{examples:[v.Z],anchor:"#update-asset-notary-details",showTitles:!1,mdxType:"ShowInfoComponent"}))}R.isMDXComponent=!0}}]);